import cv2
import numpy as np

'''
from templates import OPENPOSE_TEMPLATE, POSE_RELATIONS

data = {"people":[{"pose_keypoints_2d":[247.0258351276134,165.78265417826879,1,228.67819764841568,282.468875801258,1,149.79535195526785,277.95688416308866,1,118.89769694879823,441.01054554365714,1,216.69144176792474,409.80460776441123,1,300.67513298871904,283.4373295691087,1,319.623837065728,425.48805509971294,1,339.5362785184308,548.3903466662922,1,180.59483778153572,579.0714651745018,1,166.0980365406259,772.0743183542746,1,165.6810652456868,788.4306135031117,1,287.7410695358856,572.4384234590156,1,292.51198055141833,774.7793781066255,1,292.0931964082379,792.2921178703108,1,210.17891418672593,146.7125544381637,1,269.259219726962,149.60095325675445,1,171.23357707986747,160.5615285905359,1,283.5973952803254,155.9491603702645,1],"hand_right_keypoints_2d":[222.0373936132163,410.3500534878408,1,222.95295949962326,394.2665194402622,1,225.18337431254565,380.61952017010094,1,228.67271240587786,370.42559380509704,1,235.90467276180016,368.2487093456268,1,242.5123653817543,384.5653427367514,1,253.13429580280206,371.97661538074476,1,261.2687740648173,362.6545779442133,1,267.1432701051824,356.38030290985387,1,249.45839096154134,394.4662598702141,1,264.2363544493926,383.90240062905275,1,272.9459975194177,375.46374948907066,1,276.6819643933163,367.0103428795802,1,253.49088479452644,402.5095222829609,1,269.66056121299687,391.94485545667055,1,276.3113590419905,383.07106821179025,1,281.4162051289578,373.6777830176318,1,253.54247504608895,409.82526853869626,1,265.22156585940763,406.2129998784526,1,276.1078070449229,398.90943373307243,1,282.40451342826384,393.4006404405943,1],"hand_left_keypoints_2d":[344.6122220786058,556.9622670365242,1,342.8488972658613,570.9904504393065,1,340.3458898058318,584.1839895720489,1,342.68157338918104,594.9919112044934,1,346.4801008635973,599.8198509270617,1,352.9474675276614,587.0454346527341,1,354.7917307404391,602.8506461008175,1,351.3184729330238,616.4560710784384,1,344.1247707408942,623.2926452698445,1,356.37755350235955,590.1271400842054,1,358.52098445156025,604.3338016478249,1,354.29574512672093,617.5210903041557,1,348.9996784135777,622.6688931601236,1,359.72735450480707,593.3261860440581,1,361.5168246105575,606.9529718745881,1,355.6178239749388,621.4423611417851,1,354.1249571255993,622.2622236218094,1,0,0,0,0,0,0,0,0,0,0,0,0]}],"canvas_width":512,"canvas_height":768}

# Extract list of keypoints.
keypoints = data['people'][0]['pose_keypoints_2d']
# Turn this array into an array of lists, each having 3 elements and representing a keypoint and its confidence.
keypoints = np.array(keypoints).reshape((-1, 3))

# Setting size of image.
canvas_h, canvas_w = data["canvas_height"], data["canvas_width"]
# Set up image with 3 channels for the hues, each defined by an unsigned integer of 8 bit.
canvas = np.zeros((canvas_h, canvas_w, 3), dtype=np.uint8)

# Drawn lines between keypoints.
for pair in POSE_RELATIONS:
    # Get a pair of contigent keypoints.
    partA, partB = pair
    # If the confidence level for each keypoint is greater than 0.05 then proceed.
    if keypoints[partA][2] > 0.05 and keypoints[partB][2] > 0.05:
        x1, y1 = int(keypoints[partA][0]), int(keypoints[partA][1])
        x2, y2 = int(keypoints[partB][0]), int(keypoints[partB][1])

        # Check if both points are inside the canvas.
        if (0 <= x1 < canvas_w and 0 <= y1 < canvas_h and
            0 <= x2 < canvas_w and 0 <= y2 < canvas_h):
            cv2.line(canvas, (x1, y1), (x2, y2), (0, 255, 0), 2)

# Draw keypoints.
for x, y, c in keypoints:
    if c > 0.05:
        x, y = int(x), int(y)
        if 0 <= x < canvas_w and 0 <= y < canvas_h:
            cv2.circle(canvas, (x, y), 4, (0, 0, 255), -1)

cv2.imwrite('output/openpose_rendered.png', canvas)
cv2.imshow("Pose", canvas)
cv2.waitKey(0)
cv2.destroyAllWindows()
'''

# List all images received vie node input
# Pair them with empty openpose data
# Send the first one in the list to the frontend (convert openpose data to json)
# Frontend does something with them (adding keypoint, determining order of relations, adding a figure)
# Receive such data and store json data
# If "Send All" signal is made convert json data to openponse image
# Output reference image and openpose image pair